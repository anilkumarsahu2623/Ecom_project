{\rtf1\ansi\ansicpg1252\cocoartf2818
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 pipeline \{\
    agent any\
    \
    environment \{\
        DOCKER_IMAGE = "anilkumarsahu2623/ecom_projectexci"\
        DOCKER_REGISTRY_CREDENTIALS = credentials('docker')\
        VENV_NAME = "venv"\
        PYTHON_VERSION = "python3"\
    \}\
    \
    stages \{\
        stage('Cleanup Workspace') \{\
            steps \{\
                cleanWs()\
            \}\
        \}\
        \
        stage('Checkout') \{\
            steps \{\
                git branch: 'main',\
                    url: "https://github.com/anilkumarsahu2623/Ecom_project.git"\
            \}\
        \}\
        \
        stage('Setup Python Environment') \{\
            steps \{\
                script \{\
                    bat """\
                        $\{PYTHON_VERSION\} -m venv $\{VENV_NAME\}\
                        . $\{VENV_NAME\}/bin/activate\
                        pip install --upgrade pip\
                        # Install with specific versions to avoid conflicts\
                        pip install Flask==2.0.1 Werkzeug==2.0.1\
                        pip install pytest==7.4.0 pytest-cov==4.1.0\
                        pip install -r requirements.txt\
                    """\
                \}\
            \}\
        \}\
        \
        stage('Code Quality & Security') \{\
            parallel \{\
                stage('Lint Check') \{\
                    steps \{\
                        script \{\
                            bat """\
                                . $\{VENV_NAME\}/bin/activate\
                                pip install flake8 pylint\
                                # Run flake8\
                                flake8 . --max-line-length=120 --exclude=$\{VENV_NAME\} || true\
                                # Run pylint\
                                pylint --exit-zero *.py || true\
                            """\
                        \}\
                    \}\
                \}\
                \
                stage('Security Scan') \{\
                    steps \{\
                        script \{\
                            try \{\
                                bat """\
                                    . $\{VENV_NAME\}/bin/activate\
                                    # Install security scanning tools\
                                    pip install bandit safety detect-secrets\
                                    \
                                    # Create reports directory\
                                    mkdir -p security-reports\
                                    \
                                    # Run Bandit security scan\
                                    bandit -r . -f json -o security-reports/bandit-results.json -ll || true\
                                    \
                                    # Check dependencies for known security vulnerabilities\
                                    safety check --output json > security-reports/safety-results.json || true\
                                    \
                                    # Run detect-secrets for credential scanning\
                                    detect-secrets scan . > security-reports/secrets-scan.json || true\
                                """\
                            \} catch (Exception e) \{\
                                echo "Security scan failed: $\{e.getMessage()\}"\
                                currentBuild.result = 'UNSTABLE'\
                            \}\
                        \}\
                    \}\
                    post \{\
                        always \{\
                            archiveArtifacts artifacts: 'security-reports/**/*', allowEmptyArchive: true\
                        \}\
                    \}\
                \}\
            \}\
        \}\
        \
        stage('Run Tests') \{\
            steps \{\
                script \{\
                    try \{\
                        bat """\
                            . $\{VENV_NAME\}/bin/activate\
                            # Create coverage directory\
                            mkdir -p coverage\
                            \
                            # Run tests with coverage\
                            python -m pytest -v \\\
                                --cov=. \\\
                                --cov-report=xml:coverage/coverage.xml \\\
                                --cov-report=html:coverage/htmlcov \\\
                                test.py\
                        """\
                    \} catch (Exception e) \{\
                        currentBuild.result = 'UNSTABLE'\
                        echo "Tests failed: $\{e.getMessage()\}"\
                    \}\
                \}\
            \}\
            post \{\
                always \{\
                    archiveArtifacts artifacts: 'coverage/**/*', allowEmptyArchive: true\
                    publishHTML([\
                        allowMissing: true,\
                        alwaysLinkToLastBuild: true,\
                        keepAll: true,\
                        reportDir: 'coverage/htmlcov',\
                        reportFiles: 'index.html',\
                        reportName: 'Coverage Report',\
                        reportTitles: 'Coverage Report'\
                    ])\
                \}\
            \}\
        \}\
        \
        stage('Build Docker Image') \{\
            steps \{\
                script \{\
                    try \{\
                        bat """\
                            docker build -t $\{DOCKER_IMAGE\}:$\{BUILD_NUMBER\} \\\
                                --build-arg PYTHON_VERSION=$\{PYTHON_VERSION\} .\
                            docker tag $\{DOCKER_IMAGE\}:$\{BUILD_NUMBER\} $\{DOCKER_IMAGE\}:latest\
                        """\
                    \} catch (Exception e) \{\
                        currentBuild.result = 'FAILURE'\
                        error "Docker build failed: $\{e.getMessage()\}"\
                    \}\
                \}\
            \}\
        \}\
        \
        stage('Security Scan Docker Image') \{\
            steps \{\
                script \{\
                    try \{\
                        bat """\
                            # Install Trivy\
                            curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | TAG=latest sh -s -- -b $\{WORKSPACE\}/trivy\
\
                           # Create directory for scan results\
                           mkdir -p security-reports\
\
                         # Run Trivy from the new location\
                         $\{WORKSPACE\}/trivy/trivy image $\{DOCKER_IMAGE\}:$\{BUILD_NUMBER\} \\\
                         --no-progress --exit-code 0 \\\
                         --severity HIGH,CRITICAL \\\
                         --format template \\\
                         --template '\{\{- range . \}\}\{\{- range .Vulnerabilities \}\}\{\{println .VulnerabilityID .Severity .PkgName .InstalledVersion .FixedVersion \}\}\{\{- end \}\}\{\{- end \}\}' \\\
                         > security-reports/trivy-results.txt\
                       """\
                     \} catch (Exception e) \{\
                        echo "Trivy scan failed: $\{e.getMessage()\}"\
                        currentBuild.result = 'UNSTABLE'\
                    \}\
                \}\
            \}\
            post \{\
                always \{\
                    archiveArtifacts artifacts: 'security-reports/trivy-results.txt', allowEmptyArchive: true\
                \}\
            \}\
        \}\
        \
        stage('Docker Login and Push') \{\
            steps \{\
                script \{\
                    try \{\
                        bat '''\
                            rm -rf ~/.docker/config.json || true\
                            echo $DOCKER_REGISTRY_CREDENTIALS_PSW | docker login -u $DOCKER_REGISTRY_CREDENTIALS_USR --password-stdin\
                        '''\
                        \
                        bat """\
                            docker push $\{DOCKER_IMAGE\}:$\{BUILD_NUMBER\}\
                            docker push $\{DOCKER_IMAGE\}:latest\
                        """\
                    \} catch (Exception e) \{\
                        currentBuild.result = 'FAILURE'\
                        error "Docker push failed: $\{e.getMessage()\}"\
                    \}\
                \}\
            \}\
        \}\
    \}\
    \
    post \{\
        success \{\
            echo "Pipeline executed successfully!"\
            emailext (\
                subject: "Pipeline Successful: $\{currentBuild.fullDisplayName\}",\
                body: """\
                    Pipeline completed successfully!\
                    Build URL: $\{env.BUILD_URL\}\
                    Coverage Report: $\{env.BUILD_URL\}Coverage_Report/\
                """,\
                recipientProviders: [[$class: 'DevelopersRecipientProvider']]\
            )\
        \}\
        failure \{\
            echo "Pipeline failed! Check the logs for details."\
            emailext (\
                subject: "Pipeline Failed: $\{currentBuild.fullDisplayName\}",\
                body: """\
                    Pipeline failed!\
                    Build URL: $\{env.BUILD_URL\}\
                    Console Output: $\{env.BUILD_URL\}console\
                """,\
                recipientProviders: [[$class: 'DevelopersRecipientProvider']]\
            )\
        \}\
        always \{\
            script \{\
                // Clean up Docker\
                bat '''\
                    docker logout || true\
                    docker system prune -f || true\
                    rm -rf ~/.docker/config.json || true\
                '''\
                \
                // Remove specific Docker images\
                bat """\
                    docker rmi $\{DOCKER_IMAGE\}:$\{BUILD_NUMBER\} || true\
                    docker rmi $\{DOCKER_IMAGE\}:latest || true\
                    docker image prune -f\
                """\
                \
                // Clean workspace\
                cleanWs(\
                    cleanWhenNotBuilt: false,\
                    deleteDirs: true,\
                    disableDeferredWipeout: true,\
                    cleanWhenSuccess: true,\
                    cleanWhenUnstable: true\
                )\
            \}\
        \}\
    \}\
\}}
