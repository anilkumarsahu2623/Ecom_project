pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = "anilkumarsahu2623/ecom_projectexci"
        DOCKER_REGISTRY_CREDENTIALS = credentials('docker')
        VENV_NAME = "venv"
        PYTHON_VERSION = "python3"
    }
    
    stages {
        stage('Cleanup Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout') {
            steps {
                git branch: 'main', url: "https://github.com/anilkumarsahu2623/Ecom_project.git"
            }
        }

 stage('Setup Python Environment') {
    steps {
        script {
            bat """
                python -m venv ${VENV_NAME} || exit 1
                call ${VENV_NAME}\\Scripts\\activate.bat || exit 1
                ${VENV_NAME}\\Scripts\\python -m pip install --upgrade pip || exit 1
                ${VENV_NAME}\\Scripts\\python -m pip install Flask==2.0.1 Werkzeug==2.0.1 pytest==7.4.0 pytest-cov==4.1.0 || exit 1
                ${VENV_NAME}\\Scripts\\python -m pip install -r requirements.txt || exit 1
            """
        }
    }
}

        stage('Code Quality & Security') {
            parallel {
                stage('Lint Check') {
                    steps {
                        script {
                            bat """
                                . ${VENV_NAME}/Scripts/activate
                                pip install flake8 pylint
                                flake8 . --max-line-length=120 --exclude=${VENV_NAME} || true
                                pylint --exit-zero *.py || true
                            """
                        }
                    }
                }

                stage('Security Scan') {
                    steps {
                        script {
                            try {
                                bat """
                                    . ${VENV_NAME}/Scripts/activate
                                    pip install bandit safety detect-secrets
                                    mkdir -p security-reports
                                    bandit -r . -f json -o security-reports/bandit-results.json -ll || true
                                    safety check --output json > security-reports/safety-results.json || true
                                    detect-secrets scan . > security-reports/secrets-scan.json || true
                                """
                            } catch (Exception e) {
                                echo "Security scan failed: ${e.getMessage()}"
                                currentBuild.result = 'UNSTABLE'
                            }
                        }
                    }
                    post {
                        always {
                            archiveArtifacts artifacts: 'security-reports/**/*', allowEmptyArchive: true
                        }
                    }
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    try {
                        bat """
                            . ${VENV_NAME}/Scripts/activate
                            mkdir -p coverage
                            python -m pytest -v --cov=. --cov-report=xml:coverage/coverage.xml --cov-report=html:coverage/htmlcov test.py
                        """
                    } catch (Exception e) {
                        currentBuild.result = 'UNSTABLE'
                        echo "Tests failed: ${e.getMessage()}"
                    }
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'coverage/**/*', allowEmptyArchive: true
                    publishHTML([
                        allowMissing: true,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'coverage/htmlcov',
                        reportFiles: 'index.html',
                        reportName: 'Coverage Report',
                        reportTitles: 'Coverage Report'
                    ])
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    try {
                        bat """
                            docker build -t ${DOCKER_IMAGE}:${BUILD_NUMBER} --build-arg PYTHON_VERSION=${PYTHON_VERSION} .
                            docker tag ${DOCKER_IMAGE}:${BUILD_NUMBER} ${DOCKER_IMAGE}:latest
                        """
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        error "Docker build failed: ${e.getMessage()}"
                    }
                }
            }
        }

        stage('Security Scan Docker Image') {
            steps {
                script {
                    try {
                        bat """
                            curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | TAG=latest sh -s -- -b ${WORKSPACE}/trivy
                            mkdir -p security-reports
                            ${WORKSPACE}/trivy/trivy image ${DOCKER_IMAGE}:${BUILD_NUMBER} --no-progress --exit-code 0 --severity HIGH,CRITICAL --format template --template '{{- range . }}{{- range .Vulnerabilities }}{{println .VulnerabilityID .Severity .PkgName .InstalledVersion .FixedVersion }}{{- end }}{{- end }}' > security-reports/trivy-results.txt
                        """
                    } catch (Exception e) {
                        echo "Trivy scan failed: ${e.getMessage()}"
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'security-reports/trivy-results.txt', allowEmptyArchive: true
                }
            }
        }

        stage('Docker Login and Push') {
            steps {
                script {
                    try {
                        bat """
                             withDockerRegistry(credentialsId: 'docker', toolName: 'docker')  {
                        echo 'Successfully logged in to Docker registry' }
                            docker push ${DOCKER_IMAGE}:${BUILD_NUMBER}
                            docker push ${DOCKER_IMAGE}:latest
                        """
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        error "Docker push failed: ${e.getMessage()}"
                    }
                }
            }
        }
    }

    post {
        success {
            echo "Pipeline executed successfully!"
            emailext (
                subject: "Pipeline Successful: ${currentBuild.fullDisplayName}",
                body: """Pipeline completed successfully! Build URL: ${env.BUILD_URL}""",
                recipientProviders: [[$class: 'DevelopersRecipientProvider']]
            )
        }
        failure {
            echo "Pipeline failed! Check the logs for details."
            emailext (
                subject: "Pipeline Failed: ${currentBuild.fullDisplayName}",
                body: """Pipeline failed! Build URL: ${env.BUILD_URL}""",
                recipientProviders: [[$class: 'DevelopersRecipientProvider']]
            )
        }
        always {
            script {
                bat """
                    docker logout || true
                    docker system prune -f || true
                    docker rmi ${DOCKER_IMAGE}:${BUILD_NUMBER} || true
                    docker rmi ${DOCKER_IMAGE}:latest || true
                    docker image prune -f
                """
                cleanWs()
            }
        }
    }
}
